<?xml version="1.0" encoding="utf-8"?>
<Project>
  <Import Condition=" !Exists('Directory.Build.props.user') " Project="Directory.Build.props.default" />
  <Import Condition=" Exists('Directory.Build.props.user') " Project="Directory.Build.props.user" />

  <PropertyGroup>
    <Optimize>true</Optimize>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <!--Game Release Versions-->
  <PropertyGroup>
    <WhattaBlast>549456</WhattaBlast>
    <QoL2023June>560597</QoL2023June>
    <PackedSnacks>581003</PackedSnacks>
    <QoL2024Feb>596100</QoL2024Feb>
    <FrostyPlanetBeta>616718</FrostyPlanetBeta>
    <FrostyPlanetRelease>622222</FrostyPlanetRelease>
    <QOL2024NovBeta>641371</QOL2024NovBeta>
    <QOL2024NovRelease>644960</QOL2024NovRelease>
    <BionicBoostBeta>645088</BionicBoostBeta>
    <BionicBoosterRelease>646687</BionicBoosterRelease>
    <JanuaryHotfix1>648807</JanuaryHotfix1>
    <JanuaryHotfix2>651155</JanuaryHotfix2>
    <JanuaryHotfix3>652372</JanuaryHotfix3>
    <FebruaryQOL_Beta>659075</FebruaryQOL_Beta>
    <!--Latest-->
    <TargetGameVersion>$(FebruaryQOL_Beta)</TargetGameVersion>
  </PropertyGroup>

  <!-- versioning, forever fixed in place because it super sucks. -->
  <PropertyGroup>
    <Version>1.0.0.0</Version>
  </PropertyGroup>

  <!--Copyright notice-->
  <PropertyGroup>
    <CurrentYear>$([System.DateTime]::Now.ToString(`yyyy`))</CurrentYear>
    <Author>SlippyCheeze</Author>
    <AssemblyCopyright>Copyright Â©$(Author) $(CurrentYear)</AssemblyCopyright>
  </PropertyGroup>

  <PropertyGroup>
    <!--Normal Versions of the main dlls-->
    <AssemblyNormal>$(GameLibsFolder)/Assembly-CSharp.dll</AssemblyNormal>
    <AssemblyFirstpassNormal>$(GameLibsFolder)/Assembly-CSharp-firstpass.dll</AssemblyFirstpassNormal>
    <!--Publicized Versions of the main dlls, everything here is made public-->
    <AssemblyPublicized>$(SolutionDir)/PublicisedAssembly/Assembly-CSharp_public.dll</AssemblyPublicized>
    <AssemblyFirstpassPublicized>$(SolutionDir)/PublicisedAssembly/Assembly-CSharp-firstpass_public.dll</AssemblyFirstpassPublicized>
  </PropertyGroup>
  
  <ItemGroup Condition="'$(IsMod)' == 'true' or '$(IncludeModReferences)' == 'true'">
    <Reference Include="Assembly-CSharp">
      <!--Publicized version, run "Clean" on the 1_CycleComma project once to generate this-->
      <HintPath>$(AssemblyPublicized)</HintPath>
      <HintPath Condition="'$(GameLibsFolder)' == '../Lib'">$(GameLibsFolder)/Assembly-CSharp_public.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Assembly-CSharp-firstpass">
      <!--Publicized version, run "Clean" on the 1_CycleComma project once to generate this-->
      <HintPath>$(AssemblyFirstpassPublicized)</HintPath>
      <HintPath Condition="'$(GameLibsFolder)' == '../Lib'">$(GameLibsFolder)/Assembly-CSharp-firstpass_public.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="netstandard">
      <HintPath>$(GameLibsFolder)/netstandard.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="0Harmony">
      <HintPath>$(GameLibsFolder)/0Harmony.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="FMODUnity">
      <HintPath>$(GameLibsFolder)/FMODUnity.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="UnityEngine">
      <HintPath>$(GameLibsFolder)/UnityEngine.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>$(GameLibsFolder)/UnityEngine.CoreModule.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Newtonsoft.Json">
      <HintPath>$(GameLibsFolder)/Newtonsoft.Json.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Unity.TextMeshPro">
      <HintPath>$(GameLibsFolder)/Unity.TextMeshPro.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.AssetBundleModule">
      <HintPath>$(GameLibsFolder)/UnityEngine.AssetBundleModule.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.PhysicsModule">
      <HintPath>$(GameLibsFolder)/UnityEngine.PhysicsModule.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.Physics2DModule">
      <HintPath>$(GameLibsFolder)/UnityEngine.Physics2DModule.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.ParticleSystemModule">
      <HintPath>$(GameLibsFolder)/UnityEngine.ParticleSystemModule.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.ImageConversionModule">
      <HintPath>$(GameLibsFolder)/UnityEngine.ImageConversionModule.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.TextRenderingModule">
      <HintPath>$(GameLibsFolder)/UnityEngine.TextRenderingModule.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>$(GameLibsFolder)/UnityEngine.UI.dll</HintPath>
      <!--<HintPath>$(SolutionDir)/PublicisedAssembly/UnityEngine.UI_public.dll</HintPath>-->
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.UIModule">
      <HintPath>$(GameLibsFolder)/UnityEngine.UIModule.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="UnityEngine.WebRequestModule">
      <HintPath>$(GameLibsFolder)/UnityEngine.UnityWebRequestModule.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="com.rlabrecque.steamworks.net">
      <HintPath>$(GameLibsFolder)\com.rlabrecque.steamworks.net.dll</HintPath>
      <Private>false</Private>
    </Reference>
  </ItemGroup>

  <ItemGroup Condition="'$(IsMod)' == 'true' or '$(IncludeModReferences)' == 'true'">
    <PackageReference Include="Aze.Publicise.MSBuild.Task" Version="*">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>


  <ItemGroup Condition="'$(IsPacked)' == 'true'">
    <PackageReference Include="ILRepack.Lib.MSBuild.Task" Version="*">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition="'$(PackageType)' != 'Template'">
    <PackageReference Include="PolySharp" Version="*">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>all</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition="'$(IsMod)' == 'true' or '$(IncludeModReferences)' == 'true'">
    <!-- other global usings.  whee. -->
    <Using Include="System.Diagnostics.CodeAnalysis" />
    <Using Include="System.Reflection" />
    <Using Include="System.Runtime.CompilerServices" />
    <Using Include="System.Text.RegularExpressions" />
    <Using Include="System.Text" />

    <Using Include="HarmonyLib" />

    <Using Include="UnityEngine" />

    <PackageReference Include="Humanizer.Core" Version="*" />
    <Using Include="Humanizer" />
  </ItemGroup>
  
  <ItemGroup Condition="'$(IsMod)' == 'true'">
    <ProjectReference Include="$(MSBuildThisFileDirectory)\MetaProgramming.MetaLama\MetaProgramming.MetaLama.csproj">
      <Private>False</Private>
      <PrivateAssets>all</PrivateAssets>
      <ExcludeAssets>runtime</ExcludeAssets>
    </ProjectReference>

    <ProjectReference Include="$(MSBuildThisFileDirectory)\MetaProgramming\MetaProgramming.csproj" />
    <Using Include="SlippyCheeze.MetaProgramming" />

    <!-- expose some MSBuild project attributes to the Metalama Compiler -->
    <CompilerVisibleProperty Include="IsMod;IsPacked;ModName;ModDescription;MinimumSupportedBuild;APIVersion" />

    <!-- all mods get SupportCode merged in, too, but it compile but the once. -->
    <ProjectReference Include="$(MSBuildThisFileDirectory)\SupportCode\SupportCode.csproj" />
    <Using Include="SlippyCheeze" />
    <Using Include="SlippyCheeze.SupportCode" />
    <Using Include="SlippyCheeze.SupportCode.GlobalHarmonyHelper" Static="true" />

    <!-- and finally, include a copy of the "injected" code; just the ModMain,
         which we can only have *one* derivative of the Klei base class per DLL,
         which makes using normal inheritance unfortunately difficulty. :(
    -->
    <Compile Include="$(SolutionDir)/InjectedCode/**/*.cs" LinkBase="InjectedCode" />
  </ItemGroup>

  <PropertyGroup>
    <MetalamaDebugTransformedCode>true</MetalamaDebugTransformedCode>
    <!-- override MetalamaDebugTransformedCode setting this true by default -->
    <MetalamaFormatOutput>false</MetalamaFormatOutput>
    <MetalamaAllowPreviewLanguageFeatures>true</MetalamaAllowPreviewLanguageFeatures>
  </PropertyGroup>
</Project>
